version: 0.2
env:
  secrets-manager:
    SNYK_TOKEN: $SNYK_TOKEN_ARN:SNYK_TOKEN
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    on-failure: CONTINUE
    commands:
      - set +e
      - echo Build started on `date`
      - echo Building the Docker image...
      - export timestamp=$(date +%Y%m%d%H%M%S)
      - docker build -t $IMAGE_REPO_NAME:$timestamp .
      - docker tag $IMAGE_REPO_NAME:$timestamp $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$timestamp
      # SCA
      - docker run --rm --env SNYK_TOKEN -v /var/run/docker.sock:/var/run/docker.sock -v $PWD:/app snyk/snyk:docker snyk test --docker $IMAGE_REPO_NAME:$timestamp --severity-threshold=critical --json-file-output=/app/sca_vuln.json; exit_code_sca=$?
      - echo $exit_code_sca
      # SAST
      - docker run --rm --env SNYK_TOKEN -v $PWD:/app snyk/snyk:docker snyk code test --json-file-output=/app/sast_vuln.json; exit_code_sast=$?
      - echo $exit_code_sast
      # DAST
      - docker network create zap-network
      - docker run --rm --name $IMAGE_REPO_NAME -d --network zap-network $IMAGE_REPO_NAME:$timestamp
      - docker run --rm --network zap-network -v $PWD:/zap/wrk/:rw --user root owasp/zap2docker-stable zap-baseline.py -I -j -t http://$IMAGE_REPO_NAME:$CONTAINER_PORT -c ./dast.conf -r $IMAGE_REPO_NAME_$timestamp.html > output_dast; exit_code_dast=$?
      - echo $exit_code_dast
      - | 
        warn_new=$(tail -n 1 output_dast | sed -n 's/^.*WARN-NEW: \([0-9]\+\).*$/\1/p'); fail_new=$(tail -n 1 output_dast | sed -n 's/^.*FAIL-NEW: \([0-9]\+\).*$/\1/p')
      - echo $warn_new
      - echo $fail_new

  post_build:
    commands:
      - |
        if [ $exit_code_sca -ne 0 ]; 
        then
          echo SCA scan failed with at least one critical vulnerability
          aws s3 cp sca_vuln.json s3://$CICD_BUCKET/$IMAGE_REPO_NAME/sca/sca_$IMAGE_REPO_NAME_$timestamp.json
          echo generating a pre-signed url for sharing SCA report
          PRESIGNED_URL_SCA=$(aws s3 presign s3://$CICD_BUCKET/$IMAGE_REPO_NAME/sca/sca_$IMAGE_REPO_NAME_$timestamp.json)
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} SCA scan failed with report ${PRESIGNED_URL_SCA}\"}" $SLACK_WEBHOOK
        else
          echo SCA scan succeeded without critical vulnerabilities
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} SCA scan succeeded without critical vulnerabilities\"}" $SLACK_WEBHOOK
        fi
      - |
        if [ $exit_code_sast -ne 0 ]; 
        then
          echo SAST scan failed with at least one critical vulnerability
          aws s3 cp sast_vuln.json s3://$CICD_BUCKET/$IMAGE_REPO_NAME/sast/sast_$IMAGE_REPO_NAME_$timestamp.json
          echo generating a pre-signed url for sharing SAST report
          PRESIGNED_URL_SAST=$(aws s3 presign s3://$CICD_BUCKET/$IMAGE_REPO_NAME/sast/sast_$IMAGE_REPO_NAME_$timestamp.json)
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} SAST scan failed with report ${PRESIGNED_URL_SAST}\"}" $SLACK_WEBHOOK
        else
          echo SAST scan succeeded without critical vulnerabilities
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} SAST scan succeeded without critical vulnerabilities\"}" $SLACK_WEBHOOK
        fi
      - |
        if [ $((warn_new + fail_new)) -gt 0 ]; 
        then
          echo DAST scan failed with at least one critical vulnerability
          aws s3 cp $IMAGE_REPO_NAME_$timestamp.html s3://$CICD_BUCKET/$IMAGE_REPO_NAME/dast/dast_$IMAGE_REPO_NAME_$timestamp.html
          echo generating a pre-signed url for sharing DAST report
          PRESIGNED_URL_DAST=$(aws s3 presign s3://$CICD_BUCKET/$IMAGE_REPO_NAME/dast/dast_$IMAGE_REPO_NAME_$timestamp.html)
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} DAST scan failed with report ${PRESIGNED_URL_DAST}\"}" $SLACK_WEBHOOK
        else
          echo DAST scan succeeded without critical vulnerabilities
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} DAST scan succeeded without critical vulnerabilities\"}" $SLACK_WEBHOOK
        fi
      - |
        if [ $exit_code_sca -eq 0 ] && [ $exit_code_sast -eq 0 ] && [ $((warn_new + fail_new)) -eq 0 ]; 
        then 
          echo Build completed on `date`
          echo Pushing the Docker image...
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$timestamp
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} passed SCA, SAST, DAST check and uploaded to ECR\"}" $SLACK_WEBHOOK
        else
          curl -X POST -H 'Content-type:application/json' --data "{\"text\": \"Build ${IMAGE_REPO_NAME}:${timestamp} failed at least one of SCA, SAST, DAST check therefore not uploaded to ECR\"}" $SLACK_WEBHOOK
        fi
